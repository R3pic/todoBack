###
# @no-log
GET http://{{HOST}}:{{PORT}}/todos
Accept: application/json

> {%
    client.test("Response status should be 200", () => {
        const expected = 200;

        const actual = response.status;
        client.assert(actual === expected, `Expected '${ expected }' but received '${ actual }`);
    });

    client.test("Response content-type should be 'text/plain'", () => {
        const expected = "application/json";

        const actual = response.contentType.mimeType;
        client.assert(actual === expected, `Expected '${ expected }' but received '${ actual }'`);
    });

    client.test("Response body should contain 'Hello Elysia'", () => {
        const expected = JSON.stringify(
            {
                id: 1,
                content: "First Todo",
                isDone: false,
            });

        const actual = JSON.stringify(response.body[0]);
        client.assert(actual === expected, `Expected '${ expected }' but received '${ actual }'`);
    });

    client.test("Setting up max id", () => {
        client.global.set("maxId", 0);
        response.body.forEach(todo => {
            if (todo.id > client.global.get("maxId")) {
                client.global.set("maxId", todo.id);
            }
        });
    });
%}

###
# @no-log
POST http://{{HOST}}:{{PORT}}/todos
Accept: text/plain
Content-Type: application/json

{
  "content": "test Todo",
  "isDone": true
}

> {%
    client.test("Response status should be 201", () => {
        const expected = 201;

        const actual = response.status;
        client.assert(actual === expected, `Expected ${expected} but received ${actual}`);
    });

    client.test("Response content-type should be 'text/plain'", () => {
        const expected = 'text/plain'; // 일반 응답만 올땐 text/Plain

        const actual = response.contentType.mimeType;
        client.assert(actual === expected, `Expected ${expected} but received ${actual}`);
    });
%}

###
< {%
    request.variables.set("reqId", client.global.get("maxId"));
%}

# @no-log
PATCH http://{{HOST}}:{{PORT}}/todos/{{reqId}}
Accept: application/json
Content-Type: application/json

{
  "title": "update Todo",
  "status": "reached"
}

> {%
    client.test("Response status should be 200", () => {
        const expected = 200;

        const actual = response.status;
        client.assert(actual === expected, `Expected ${expected} but received ${actual}`);
    });

    client.test("Response content-type should be 'application/json'", () => {
        const expected = 'application/json';

        const actual = response.contentType.mimeType;
        client.assert(actual === expected, `Expected ${expected} but received ${actual}`);
    });

    client.test("Response body should be 'First todo", () => {
        const expected = JSON.stringify({
            id: Number(client.global.get("maxId")),
            title: "update Todo",
            status: "reached",
        });

        const actual = JSON.stringify(response.body);
        client.assert(actual === expected, `Expected ${expected} but received ${actual}`);
    });
%}

###
< {%
    request.variables.set("reqId", client.global.get("maxId"));
%}

# @no-log
DELETE http://{{HOST}}:{{PORT}}/todos/{{reqId}}
Accept: application/json
Content-Type: application/json


> {%
    client.test("Response status should be 200", () => {
        const expected = 200;

        const actual = response.status;
        client.assert(actual === expected, `Expected ${expected} but received ${actual}.`)
    });

    client.test("Response content-type should be 'application/json'", () => {
        const expected = "application/json";

        const actual = response.contentType.mimeType;
        client.assert(actual === expected, `Expected ${expected} but received ${actual}.`)
    });

    client.test("Response body should contain 'First todo", () => {
        const expected = JSON.stringify({
            id: Number(client.global.get("maxId")),
            "title": "update Todo",
            "status": "reached"
        });

        const actual = JSON.stringify(response.body);
        client.assert(actual === expected, `Expected ${expected} but received ${actual}.`)
    });
%}
